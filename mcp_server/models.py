# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:15:36+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, Field, RootModel


class Status(Enum):
    pending = 'pending'
    failure = 'failure'
    success = 'success'


class Status2(Enum):
    UNKNOWN = 'UNKNOWN'
    UP = 'UP'
    DOWN = 'DOWN'


class Health(BaseModel):
    description: Optional[str] = Field(
        None, description='A description of the status of the service.'
    )
    details: Optional[Dict[str, Health]] = Field(
        None,
        description='Details of the health of the service. This contains information about the status of the components on which the service depends.',
    )
    status: Optional[Status2] = Field(
        None, description='The status of the service.', examples=['UP']
    )


class Status3(Enum):
    success = 'success'
    failure = 'failure'
    pending = 'pending'


class LanguageStats(BaseModel):
    alerts: Optional[int] = Field(
        None, description='The number of alerts for this language.', examples=[628]
    )
    analysis_date: Optional[datetime] = Field(
        None, alias='analysis-date', description='The time the commit was analyzed.'
    )
    commit_date: Optional[datetime] = Field(
        None, alias='commit-date', description='The time of the commit.'
    )
    commit_id: Optional[str] = Field(
        None,
        alias='commit-id',
        description='The latest successfully analyzed commit for the language. All statistics refer to this commit.',
        examples=['04d7a2300feec9bbcc48185e370e3b5d3ae4da9d'],
    )
    language: Optional[str] = Field(
        None, description='The short name for the language.', examples=['javascript']
    )
    lines: Optional[int] = Field(
        None,
        description='The number of lines of code for this language.',
        examples=[133298],
    )
    status: Optional[Status3] = Field(
        None,
        description='The status of the analysis of this language.',
        examples=['success'],
    )


class Measurement(BaseModel):
    timestamp: Optional[datetime] = Field(
        None, description='The date and time when this metric was computed.'
    )
    value: Optional[float] = Field(
        None, description='The value of this metric at the timestamp reported.'
    )


class Metric(BaseModel):
    measurements: Optional[List[Measurement]] = Field(
        None,
        description='A time series of values taken by the metric at different timestamps.',
    )
    metric_id: Optional[str] = Field(
        None,
        alias='metric-id',
        description='The identifier by which this metric is referenced in the API.',
    )


class MetricName(BaseModel):
    description: Optional[str] = Field(
        None,
        description='The name by which the metric is listed in the user interface.',
    )
    metric_id: Optional[str] = Field(
        None,
        alias='metric-id',
        description='The identifier by which this metric is referenced in the API.',
    )


class MetricsList(BaseModel):
    data: Optional[List[MetricName]] = Field(
        None,
        description='The list of names and identifiers by which the metrics are referenced.',
    )


class Status4(Enum):
    pending = 'pending'
    done = 'done'


class TaskType(Enum):
    analysis = 'analysis'
    codereview = 'codereview'
    queryjob = 'queryjob'


class Project(BaseModel):
    id: Optional[int] = Field(
        None, description='The numeric identifier of the project.', examples=[1234567]
    )
    name: Optional[str] = Field(
        None,
        description='The display name of the project.',
        examples=['Apache Commons IO'],
    )
    url: Optional[str] = Field(
        None,
        description='The full URL of the project on LGTM.',
        examples=['https://lgtm.example.com/projects/g/apache/commons-io'],
    )
    url_identifier: Optional[str] = Field(
        None,
        alias='url-identifier',
        description='The URL identifier of the project.',
        examples=['g/apache/commons-io'],
    )


class Grade(Enum):
    A_ = 'A+'
    A = 'A'
    B = 'B'
    C = 'C'
    D = 'D'
    E = 'E'


class ProjectLanguageStats(LanguageStats):
    grade: Optional[Grade] = Field(
        None, description='The grade of the code for this language.', examples=['A+']
    )


class ProjectList(BaseModel):
    data: Optional[List[Project]] = Field(
        None, description='A single page of projects.'
    )
    nextPageUrl: Optional[str] = Field(
        None,
        description='The URL to retrieve the next page of projects. Omitted if there is no next page.',
        examples=[
            'https://lgtm.example.com/api/v1.0/projects?start=AVAIySnWtmGBpZjIb27kbrqB2uK2HIU0Zk9Sfh19ya8nxzA4GE5bv9LxVPSjQCwHKThqAADNvp17WuWBuBe8901G-ryeA2tLD6JZh8lue2IM0EuqsqB9Wk5BAM6T0lEnXA'
        ],
    )


class QueryResultEntry(BaseModel):
    file: Optional[str] = None
    line: Optional[int] = None
    url: Optional[AnyUrl] = None
    value: Optional[str] = None


class QueryProperties(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The `@id` of the query.',
        examples=['js/incomplete-sanitization'],
    )
    name: Optional[str] = Field(
        None,
        description='The `@name` of the query.',
        examples=['Incomplete string escaping or encoding'],
    )
    severity: Optional[str] = Field(
        None, description='The severity of the query.', examples=['warning']
    )
    tags: Optional[List[str]] = Field(
        None,
        description='The `@tags` associated with the query.',
        examples=[['correctness', 'security', 'external/cwe/cwe-116']],
    )


class QueryjobProjectResults(BaseModel):
    columns: Optional[List[str]] = Field(
        None, description='Columns returned by the query.'
    )
    data: Optional[List[List[QueryResultEntry]]] = Field(
        None, description='Results of the query divided by row.'
    )
    next: Optional[str] = Field(
        None,
        description='URL for retrieving the next part of the results (if applicable).',
    )
    project: Optional[Project] = None


class Status5(Enum):
    success = 'success'
    error = 'error'


class QueryjobResultsOverviewEntry(BaseModel):
    error: Optional[str] = Field(
        None, description='Error message. Only applies if `status` is `error`.'
    )
    external: Optional[int] = Field(
        None,
        description='Number of results that refer to elements outside the source tree (e.g., libraries). Only applies if `status` is `success`.',
        examples=[10],
    )
    internal: Optional[int] = Field(
        None,
        description='Number of results that refer to elements within the source tree. Only applies if `status` is `success`.',
        examples=[1],
    )
    project: Optional[Project] = None
    status: Optional[Status5] = Field(
        None,
        description='Describes whether the query was sucessfully executed against the project.',
        examples=['success'],
    )
    total: Optional[int] = Field(
        None,
        description='Number of results returned by the query. This is broken down further into `internal` and `external` results. Only applies if `status` is `success`.\n',
        examples=[11],
    )


class QueryjobStats(BaseModel):
    failed: Optional[int] = Field(
        None,
        description='The number of projects for which the query failed.',
        examples=[1],
    )
    pending: Optional[int] = Field(
        None,
        description='The number of projects scheduled for execution but pending. For very large jobs, not all projects are scheduled at the same time. Therefore, this number might increase as more projects are scheduled. This means that `successful + failed + pending` might be smaller than the total number of project that will be analyzed.\n',
        examples=[1],
    )
    success_with_result: Optional[int] = Field(
        None,
        alias='success-with-result',
        description='The number of projects for which the query returned results.',
        examples=[3],
    )
    success_without_result: Optional[int] = Field(
        None,
        alias='success-without-result',
        description='The number of projects for which the query was successful but returned no results.',
        examples=[5],
    )
    successful: Optional[int] = Field(
        None,
        description='The number of projects for which the query completed succesfully. These are broken down further between the ones that have results (`success-with-result`) and the ones that do not (`success-without-result`): `successful = success-with-result + success-without-result`.\n',
        examples=[8],
    )


class UploadSession(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The identifier of the upload session',
        examples=['0bc9f13977e364395e8527515da9cbfa0e741cb035fe571197e82e0dd549416d'],
    )
    url: Optional[AnyUrl] = Field(
        None,
        description='The URL for uploading file content.',
        examples=[
            'https://lgtm.example.com/api/v1.0/snapshots/uploads/0bc9f13977e364395e8527515da9cbfa0e741cb035fe571197e82e0dd549416d'
        ],
    )


class Version(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='The version number of the API.', examples=['1.0']
    )


class AnalysesAnalysisIdAlertsGetResponse(BaseModel):
    pass


class Language(RootModel[List[str]]):
    root: List[str] = Field(..., max_length=10)


class IssuesProjectIdAlertKeyGetResponse(BaseModel):
    pass


class OpenapiGetResponse(BaseModel):
    pass


class Mode(Enum):
    full = 'full'
    sparse = 'sparse'
    upload = 'upload'


class Language1(RootModel[List[str]]):
    root: List[str]


class WorkerLabel(RootModel[List[str]]):
    root: List[str]


class Source(Enum):
    repository = 'repository'
    administrator = 'administrator'


class ProjectsProjectIdSettingsAnalysisConfigurationGetResponse(BaseModel):
    pass


class ProjectsProjectIdSettingsAnalysisConfigurationPutResponse(BaseModel):
    pass


class ProjectId(RootModel[List[int]]):
    root: List[int] = Field(..., max_length=200, min_length=0)


class Analysis(BaseModel):
    commit_id: Optional[str] = Field(
        None,
        alias='commit-id',
        description='The commit identifier.\nThe commit identifier is included only if the same commit was successfully analyzed for all languages. A detailed breakdown of which commit was analyzed for each language is provided in the `languages` property.\n',
        examples=['04d7a2300feec9bbcc48185e370e3b5d3ae4da9d'],
    )
    id: Optional[str] = Field(
        None,
        description='The analysis identifier.',
        examples=['2e65208b2f1872634132566a1a0ce6392407297c'],
    )
    languages: Optional[List[LanguageStats]] = Field(
        None, description='Per-language information.'
    )
    log_url: Optional[str] = Field(
        None,
        alias='log-url',
        description='A page on LGTM to view the logs for this analysis.',
        examples=[
            'https://lgtm.example.com/projects/g/yarnpkg/yarn/logs/analysis/2e65208b2f1872634132566a1a0ce6392407297c'
        ],
    )
    project: Optional[Project] = None
    results_url: Optional[str] = Field(
        None,
        alias='results-url',
        description='A page on LGTM to view the results of this analysis.',
        examples=[
            'https://lgtm.example.com/projects/g/yarnpkg/yarn/analysis/2e65208b2f1872634132566a1a0ce6392407297c/files'
        ],
    )


class ProjectDetails(Project):
    languages: Optional[List[ProjectLanguageStats]] = Field(
        None, description='Per-language information.'
    )


class Query(BaseModel):
    id: Optional[int] = Field(
        None, description='The numeric identifier of the query.', examples=[10000]
    )
    language: Optional[str] = Field(
        None,
        description='The [language code](https://lgtm.com/help/lgtm/analysis-faqs#which-languages-are-supported) of the query.',
        examples=['javascript'],
    )
    name: Optional[str] = Field(
        None,
        description='The `@name` of the query.',
        examples=['Incomplete string escaping or encoding'],
    )
    pack: Optional[str] = Field(
        None,
        description='The name of the query pack that contains the query.',
        examples=['com.lgtm/javascript-queries'],
    )
    properties: Optional[QueryProperties] = None
    url: Optional[str] = Field(
        None,
        description='A page on LGTM to view the details of the query.',
        examples=['https://lgtm.example.com/rules/1000774/'],
    )


class Queryjob(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The identifier for the QueryJob.',
        examples=['b45e291e7033460949ec986153c5416d22157d3e'],
    )
    result_url: Optional[str] = Field(
        None,
        alias='result-url',
        description='URL to view the result of the query job.',
        examples=[
            'https://lgtm.com/api/v1.0/query/b45e291e7033460949ec986153c5416d22157d3e'
        ],
    )
    stats: Optional[QueryjobStats] = None


class QueryjobResultsOverview(BaseModel):
    data: Optional[List[QueryjobResultsOverviewEntry]] = None
    next: Optional[str] = None


class CodereviewAlerts(BaseModel):
    fixed: Optional[int] = Field(
        None,
        description='The number of alerts fixed by the patch for this query.',
        examples=[1],
    )
    new: Optional[int] = Field(
        None,
        description='The number of alerts introduced by the patch for this query.',
        examples=[0],
    )
    query: Optional[Query] = None


class CodereviewLanguages(BaseModel):
    alerts: Optional[List[CodereviewAlerts]] = Field(
        None,
        description='The list of added and fixed alerts per query for this language.',
    )
    fixed: Optional[int] = Field(
        None,
        description='The total number of alerts fixed by the patch for this language.',
        examples=[1],
    )
    language: Optional[str] = Field(
        None, description='The language analyzed.', examples=['javascript']
    )
    new: Optional[int] = Field(
        None,
        description='The total number of alerts introduced by the patch for this language.',
        examples=[0],
    )
    status: Optional[Status] = Field(
        None,
        description='The status for analysis of this language.',
        examples=['success'],
    )
    status_message: Optional[str] = Field(
        None,
        alias='status-message',
        description='The current state of analysis of this langauge. When available, a summary of analysis results.',
        examples=['1 fixed alert'],
    )


class CodeReview(BaseModel):
    id: Optional[str] = Field(
        None,
        description='The identifier for the review.',
        examples=['b45e291e7033460949ec986153c5416d22157d3e'],
    )
    languages: Optional[List[CodereviewLanguages]] = Field(
        None, description='Detailed information for each language analyzed.'
    )
    results_url: Optional[str] = Field(
        None,
        alias='results-url',
        description='A page on LGTM to view the status and results of this code review.',
        examples=[
            'https://lgtm.example.com/projects/g/yarnpkg/yarn/rev/pr-b45e291e7033460949ec986153c5416d22157d3e'
        ],
    )
    status: Optional[Status] = Field(
        None, description='The status of the code review.', examples=['success']
    )
    status_message: Optional[str] = Field(
        None,
        alias='status-message',
        description='A summary of the current status of the code review.',
        examples=['Analysis succeeded'],
    )


class Operation(BaseModel):
    id: Optional[int] = Field(
        None, description='The identifier for the operation.', examples=[7654321]
    )
    status: Optional[Status4] = Field(
        None, description='Status of the operation.', examples=['pending']
    )
    task_result: Optional[Union[Analysis, CodeReview, Queryjob]] = Field(
        None, alias='task-result'
    )
    task_result_url: Optional[str] = Field(
        None,
        alias='task-result-url',
        description='The URL for the result of the task. For some operations, included only on completion.',
        examples=[
            'https://lgtm.example.com/api/v1.0/codereviews/b45e291e7033460949ec986153c5416d22157d3e'
        ],
    )
    task_type: TaskType = Field(..., alias='task-type')
    uploads: Optional[Dict[str, UploadSession]] = None


class CodereviewsReviewIdGetResponse(RootModel[List[CodeReview]]):
    root: List[CodeReview]


Health.model_rebuild()
